---
title: "Reproduction of Palmer Penguins Dataset Analysis"
subtitle: 'MSc in Statistics 2025/26, Imperial College London'
author: "Kevin O'Loughlin. 06059955"
format:
  html:
    toc: true
    highlight: tango
    self-contained: true
    df-print: paged
  pdf: default
format-links: false
bibliography: "MSc_Statistics_coursework_template_quarto.bib" 
---

<style type="text/css">
h1{
  font-size: 24pt;
}
h2{
  font-size: 18pt;
}
body{
  font-size: 12pt;
}
</style>

```{r setup, include = FALSE, tidy=TRUE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
include_solutions <- TRUE
```
```{r setup2, include=FALSE, tidy=TRUE}
require(rmarkdown)
require(knitr)
require(kableExtra)
# Put any library imports and other preamble here.
```

```{r}
#| warning: false
library(palmerpenguins)

# use :: to access data or functions from within a package 
penguins <- palmerpenguins::penguins
colnames(penguins)
```

```{r, message=FALSE}
sex_counts <- table(penguins$sex)
knitr::kable(sex_counts, col.names  = c("Sex", "Count"))
```


```{r, echo=FALSE}
#| layout-ncol: 2
#| layout-nrow: 2
#| label: box_whisker-plots
#| fig-cap: "Distributions of Features by Sex"
#| fig-subcap: 
#|   - "Bill Length Distribution"
#|   - "Bill Depth Distribution"
#|   - "Flipper Length Distribution"
#|   - "Body Mass Distribution"

vars <- c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g")

par(mfrow = c(2, 2))

for (v in vars) {
  plot(penguins$sex, penguins[[v]],
       xlab = "Sex",
       ylab = gsub("_", " ", v),
       col = c(6, 3))
  abline(h = mean(penguins[[v]], na.rm = TRUE), col = 2, lwd = 2)
}
```




```{r, echo=FALSE}

### Question 1a

generate_cauchy_samples <- function(n) {
  # Generate 'n' uniform random numbers between 0 and 1
  u <- runif(n)
  
  # Apply the inverse CDF formula to get Cauchy samples
  samples <- tan(pi * (u - 0.5))  
  return(samples)
}

num_samples = 1000

# Generate samples from the standard Cauchy distribution
cauchy_samples <- generate_cauchy_samples(num_samples)

```


**Part b.**   The empirical cdf based on $N$ samples $x_1, \ldots, x_N$ is defined to be
              $$
                \widehat{F}(t) = \frac{1}{N}\sum_{i = 1}^N \mathbf{1}[x_i \leq t], \quad x\in \mathbb{t}.
              $$
To generate the empirical cdf in R, we perform the following steps:
            
a. Generate $N$ samples from the distribution using the inversion method, as detailed in the previous question.  
b. Sort the samples in ascending order $x_1 \leq x_2 \leq x_3 \leq \ldots \leq x_N$.
c. The empirical CDF at value $x_i$ is given by $i/N$.  


In the following figure we plot the empirical cdf based on 1000 samples (black line), and compare against the analytical cdf (red line).  

```{r echo=FALSE}

### Question 1b

# Sort the samples in ascending order
sorted_samples <- sort(cauchy_samples)

# Calculate the cumulative probabilities for each sample
cumulative_probs <- (1:num_samples) / num_samples

x_values <- seq(-100, 100,  length.out = 1000)
cdf_values <- pcauchy(x_values)

# Plot the empirical CDF
plot(sorted_samples, 
     cumulative_probs, 
     type = "s", 
     xlab = "x", 
     ylab = "Empirical CDF", 
     main = "Empirical CDF of Standard Cauchy Distribution", 
     lwd = 2, lty = 1, xlim = c(-100,100))
lines(x_values, cdf_values, type = "l", 
      xlab = "x", ylab = "CDF", main = "CDF of Standard Cauchy Distribution", 
      col = 'red', lty = 2)
```

**Part c.**  We shall use the samples to compute the empirical cdf for the values $x = 0.5, 1, 10$.  

```{r echo=FALSE}

### Question 1c

calculate_ecdf <- function(x) {
    return(sum(sorted_samples <= x)/num_samples)
}

df <- data.frame(x = c(0.5, 1.0, 10.0), 
                ecdf = c(calculate_ecdf(0.5), 
                         calculate_ecdf(1.0), 
                         calculate_ecdf(10.0))
                )
kbl(df,
    caption = 'Empirical CDF', 
    label = 'ecdf',
    digits = 2) %>%
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed"),
    font_size = 12)
```


# Code appendix

Rather than re-paste all the code to the appendix, here is a trick which makes the markdown file output all the code (without) execution in the appendix, without any duplication.

Please keep in mind to format the code so that the entire code is clearly visible and does not run into the margins of the pdf version.  

```{r ref.label=knitr::all_labels(), echo = T, eval = F}
```

# References
